package com.mukesh.firestoredemo.view.firebaseOperations.multiDoc;

import android.os.Bundle;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.mukesh.firestoredemo.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.EventListener;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;

import javax.annotation.Nullable;

/**
 * STEP - 2
 * In this Activity we are performing Add/Update/Delete/Load
 * operation on a Multiple Document
 * In this class Document id is not fixed, It's auto-generated by firebase
 * We are using NoteModel class for operation
 */

public class MultiDocOperation extends AppCompatActivity {
    private EditText editTitle, editDesc;
    private TextView noteTextView;
    private String COLL_NAME = "Multi Doc Notes";
    private CollectionReference noteCollRef =
            FirebaseFirestore.getInstance().collection(COLL_NAME);

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_multi_doc_operation);
        editTitle = findViewById(R.id.edit_title);
        editDesc = findViewById(R.id.edit_description);
        noteTextView = findViewById(R.id.note_text_view);
    }

    @Override
    protected void onStart() {
        super.onStart();
        noteCollRef.addSnapshotListener(new EventListener<QuerySnapshot>() {
            @Override
            public void onEvent(@Nullable QuerySnapshot queryDocumentSnapshots, @Nullable FirebaseFirestoreException e) {

                if (e != null) {
                    e.printStackTrace();
                    Toast.makeText(MultiDocOperation.this, "Failed to add listener", Toast.LENGTH_SHORT).show();
                    return;
                }

                StringBuilder data = new StringBuilder();
                if (queryDocumentSnapshots != null && !queryDocumentSnapshots.isEmpty())
                    for (QueryDocumentSnapshot documentSnapshot : queryDocumentSnapshots) {
                        NoteModel note = documentSnapshot.toObject(NoteModel.class);
                        note.setDocumentId(documentSnapshot.getId());
                        data.append("Title ").append(note.getTitle())
                                .append("\nDescription ").append(note.getDescription())
                                .append("\nDocument id ").append(note.getDocumentId())
                                .append("\n\n");
                    }
                noteTextView.setText(data.toString());

            }
        });
    }

    public void addNoteToFirebase(View view) {
        String title = editTitle.getText().toString().trim();
        String desc = editDesc.getText().toString().trim();
        if (title.length() == 0 ||
                desc.length() == 0) {
            Toast.makeText(this, "Please enter title and description",
                    Toast.LENGTH_SHORT).show();

            return;
        }
        NoteModel model = new NoteModel(title, desc);
        noteCollRef.add(model).
                addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
                    @Override
                    public void onSuccess(DocumentReference documentReference) {
                        Toast.makeText(MultiDocOperation.this, "Added",
                                Toast.LENGTH_SHORT).show();
                    }
                }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                Toast.makeText(MultiDocOperation.this,
                        "Failed to load ", Toast.LENGTH_SHORT).show();
            }
        });
    }

    public void loadAllNotes(View view) {
        noteCollRef.get().addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {
            @Override
            public void onSuccess(QuerySnapshot queryDocumentSnapshots) {

                StringBuilder data = new StringBuilder();
                if (queryDocumentSnapshots != null)
                    for (QueryDocumentSnapshot documentSnapshot : queryDocumentSnapshots) {
                        NoteModel note = documentSnapshot.toObject(NoteModel.class);
                        data.append("Title ").append(note.getTitle())
                                .append("\nDescription ").append(note.getDescription())
                                .append("\nDocument id ").append(documentSnapshot.getId())
                                .append("\n\n");
                    }
                noteTextView.setText(data.toString());

            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                Toast.makeText(MultiDocOperation.this, "Failed to load", Toast.LENGTH_SHORT).show();
            }
        });
    }

    /**
     * There is no API to delete an entire collection (or its contents) in one go.
     * From the Firestore documentation:
     * To delete an entire collection or subcollection in Cloud Firestore,
     * retrieve all the documents within the collection or
     * subcollection and delete them. If you have larger collections,
     * you may want to delete the documents in smaller batches to avoid
     * out-of-memory errors. Repeat the process until you've deleted the entire
     * collection or subcollection.
     */
    public void deleteAllNotes(View view) {

        noteCollRef.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
            @Override
            public void onComplete(@NonNull Task<QuerySnapshot> task) {

                if (task.getException() != null) {
                    Toast.makeText(MultiDocOperation.this, "Failed to delete", Toast.LENGTH_SHORT).show();
                    return;
                }
                if (task.isSuccessful() && task.getResult() != null) {

                    for (QueryDocumentSnapshot snapshots : task.getResult()) {
                        noteCollRef.document(snapshots.getId()).delete();
                    }
                }
                Toast.makeText(MultiDocOperation.this, "Deleted successfully", Toast.LENGTH_SHORT).show();

            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                Toast.makeText(MultiDocOperation.this, "Failed to delete", Toast.LENGTH_SHORT).show();

            }
        });

    }


}
